// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: helloworld/helloworld.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Greeter1Client is the client API for Greeter1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Greeter1Client interface {
	SayHello1(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	SayHello2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter1_SayHello2Client, error)
	SayHello3(ctx context.Context, opts ...grpc.CallOption) (Greeter1_SayHello3Client, error)
	SayHello4(ctx context.Context, opts ...grpc.CallOption) (Greeter1_SayHello4Client, error)
}

type greeter1Client struct {
	cc grpc.ClientConnInterface
}

func NewGreeter1Client(cc grpc.ClientConnInterface) Greeter1Client {
	return &greeter1Client{cc}
}

func (c *greeter1Client) SayHello1(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/helloworld.Greeter1/SayHello1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeter1Client) SayHello2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter1_SayHello2Client, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter1_ServiceDesc.Streams[0], "/helloworld.Greeter1/SayHello2", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeter1SayHello2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter1_SayHello2Client interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeter1SayHello2Client struct {
	grpc.ClientStream
}

func (x *greeter1SayHello2Client) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeter1Client) SayHello3(ctx context.Context, opts ...grpc.CallOption) (Greeter1_SayHello3Client, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter1_ServiceDesc.Streams[1], "/helloworld.Greeter1/SayHello3", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeter1SayHello3Client{stream}
	return x, nil
}

type Greeter1_SayHello3Client interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloReply, error)
	grpc.ClientStream
}

type greeter1SayHello3Client struct {
	grpc.ClientStream
}

func (x *greeter1SayHello3Client) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeter1SayHello3Client) CloseAndRecv() (*HelloReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeter1Client) SayHello4(ctx context.Context, opts ...grpc.CallOption) (Greeter1_SayHello4Client, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter1_ServiceDesc.Streams[2], "/helloworld.Greeter1/SayHello4", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeter1SayHello4Client{stream}
	return x, nil
}

type Greeter1_SayHello4Client interface {
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeter1SayHello4Client struct {
	grpc.ClientStream
}

func (x *greeter1SayHello4Client) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeter1SayHello4Client) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Greeter1Server is the server API for Greeter1 service.
// All implementations must embed UnimplementedGreeter1Server
// for forward compatibility
type Greeter1Server interface {
	SayHello1(context.Context, *HelloRequest) (*HelloReply, error)
	SayHello2(*HelloRequest, Greeter1_SayHello2Server) error
	SayHello3(Greeter1_SayHello3Server) error
	SayHello4(Greeter1_SayHello4Server) error
	mustEmbedUnimplementedGreeter1Server()
}

// UnimplementedGreeter1Server must be embedded to have forward compatible implementations.
type UnimplementedGreeter1Server struct {
}

func (UnimplementedGreeter1Server) SayHello1(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello1 not implemented")
}
func (UnimplementedGreeter1Server) SayHello2(*HelloRequest, Greeter1_SayHello2Server) error {
	return status.Errorf(codes.Unimplemented, "method SayHello2 not implemented")
}
func (UnimplementedGreeter1Server) SayHello3(Greeter1_SayHello3Server) error {
	return status.Errorf(codes.Unimplemented, "method SayHello3 not implemented")
}
func (UnimplementedGreeter1Server) SayHello4(Greeter1_SayHello4Server) error {
	return status.Errorf(codes.Unimplemented, "method SayHello4 not implemented")
}
func (UnimplementedGreeter1Server) mustEmbedUnimplementedGreeter1Server() {}

// UnsafeGreeter1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Greeter1Server will
// result in compilation errors.
type UnsafeGreeter1Server interface {
	mustEmbedUnimplementedGreeter1Server()
}

func RegisterGreeter1Server(s grpc.ServiceRegistrar, srv Greeter1Server) {
	s.RegisterService(&Greeter1_ServiceDesc, srv)
}

func _Greeter1_SayHello1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Greeter1Server).SayHello1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter1/SayHello1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Greeter1Server).SayHello1(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter1_SayHello2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Greeter1Server).SayHello2(m, &greeter1SayHello2Server{stream})
}

type Greeter1_SayHello2Server interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeter1SayHello2Server struct {
	grpc.ServerStream
}

func (x *greeter1SayHello2Server) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter1_SayHello3_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Greeter1Server).SayHello3(&greeter1SayHello3Server{stream})
}

type Greeter1_SayHello3Server interface {
	SendAndClose(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeter1SayHello3Server struct {
	grpc.ServerStream
}

func (x *greeter1SayHello3Server) SendAndClose(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeter1SayHello3Server) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter1_SayHello4_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Greeter1Server).SayHello4(&greeter1SayHello4Server{stream})
}

type Greeter1_SayHello4Server interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeter1SayHello4Server struct {
	grpc.ServerStream
}

func (x *greeter1SayHello4Server) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeter1SayHello4Server) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Greeter1_ServiceDesc is the grpc.ServiceDesc for Greeter1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter1",
	HandlerType: (*Greeter1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello1",
			Handler:    _Greeter1_SayHello1_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello2",
			Handler:       _Greeter1_SayHello2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHello3",
			Handler:       _Greeter1_SayHello3_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHello4",
			Handler:       _Greeter1_SayHello4_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloworld/helloworld.proto",
}
